<?xml version="1.0" encoding="UTF-8"?>
<!--

       Copyright 2012 MegaFon

       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at

           http://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.

-->
<suites>

	<!-- Rules to parse and treat function body code -->
	<!-- :args: -  if several args were passed print them all joined with '-' symbol and with '[' in the beginning and ']' at the end -->
	<!-- :exception: - text in function body means that this function should throw exception -->

	<suite name="register new global functions">
        <!-- test if we have deleted old event() fucntionality -->
        <case>
            <input>a {{event().isUndefined()}} b</input>
            <expected>a true b</expected>
        </case>

		<!-- test is it works -->
		<case>
			<function name="test_func1" return="string">test function</function>
			<input>a {{test_func1()}} b</input>
			<expected>a test function b</expected>
		</case>
		
		<!-- test is it works -->
		<case>
			<function name="test_func2" return="number">123.45</function>
			<input>a {{test_func2()}} b</input>
			<expected>a 123.45 b</expected>
		</case>
		
		<!-- check no args passed to function -->
		<case>
			<function name="test_func3" return="string">test function :args: eof</function>
			<input>a {{test_func3()}} b</input>
			<expected>a test function [] eof b</expected>
		</case>
		
		<!-- check single argument passed to function -->
		<case>
			<function name="test_func4" return="string">test function :args: eof</function>
			<input>a {{test_func4('test')}} b</input>
			<expected>a test function [string(test)] eof b</expected>
		</case>
		
		<!-- check args passed into function -->
		<case>
			<function name="test_func5" return="string">test function :args: eof</function>
			<input>a {{test_func5('test','abcd',1234)}} b</input>
			<expected>a test function [string(test)-string(abcd)-number(1234)] eof b</expected>
		</case>
		
		<!-- check for correct return type -->
		<case>
			<function name="test_func6" return="number">123.45</function>
			<input>{{test_func6().isNumber()}}</input>
			<expected>true</expected>
		</case>
		<case>
			<function name="test_func6" return="number">123.45</function>
			<input>a {{test_func6()}} b {{test_func6().isNumber()}} c</input>
			<expected>a 123.45 b true c</expected>
		</case>

		<!-- check if result will be Undefined if function throws some exception -->
		<case>
			<function name="test_func7" return="number">:exception:</function>
			<input>a {{test_func7().isUndefined()}} b</input>
			<expected>a true b</expected>
		</case>
	</suite>

	<suite name="rewrite existent global functions">
		<!-- Check global min function work properly -->
		<case>
			<input>a {{min(1,2)}} b</input>
			<expected>a 1 b</expected>
		</case>

		<!-- rewrite global min function with our own -->
		<case>
			<function name="min" return="number">555</function>
			<input>a {{min(1,2)}} b</input>
			<expected>a 555 b</expected>
		</case>

		<!-- check if global include function works -->
		<case>
            <resourceResolver type="default"/>
            <input>a {{include(':baseURI:testresources/tpl/test_for_include.tpl')}} b</input>
			<expected>a include file contents b</expected>
		</case>

		<!-- rewrite global include function with our own -->
		<case>
			<function name="include" return="string">include :args: result</function>
            <resourceResolver type="default"/>
            <input>a {{include(':baseURI:testresources/tpl/test_for_include.tpl')}} b</input>
            <expected>a include [string(:baseURI:testresources/tpl/test_for_include.tpl)] result b</expected>
		</case>
	</suite>


</suites>